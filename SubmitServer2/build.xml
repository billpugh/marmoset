<!--
 Marmoset: a student project snapshot, submission, testing and code review
 system developed by the Univ. of Maryland, College Park
 
 Developed as part of Jaime Spacco's Ph.D. thesis work, continuing effort led
 by William Pugh. See http://marmoset.cs.umd.edu/
 
 Copyright 2005 - 2011, Univ. of Maryland
 
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
-->

<project name="submitServer" default="dist" basedir=".">

  <!-- Servlets Ant build file -->

  <!-- local.properties should not be checked into CVS -->
  <property file="local.build.properties" />
  <!-- set global properties for this build -->
  <property file="build.properties" />

  <property name="modelClasses.home" value="../SubmitServerModelClasses"/>


  <!-- The classpath to be used to compile  -->
  <path id="base.classpath">
    <pathelement location="WebRoot/WEB-INF/classes"/>
    <pathelement location="lib/j2ee.jar"/>
    <pathelement location="lib/cobogw-1.3.2.jar"/>

                <pathelement location="${gwt.sdk}/gwt-user.jar"/>
          <fileset dir="${gwt.sdk}" includes="gwt-dev*.jar"/>
          <fileset dir="${gwt.sdk}" includes="validation-*.jar"/>

    <pathelement location="lib/jsr305.jar"/>
    <pathelement location="lib/annotations.jar"/>
    <fileset dir="WebRoot/WEB-INF/lib" includes="**/*.jar"/>
  </path>

  <path id="junit.classpath">
                <pathelement location="${gwt.sdk}/gwt-user.jar"/>
    <pathelement location="lib/j2ee.jar"/>
    <pathelement location="lib/jsr305.jar"/>
    <pathelement location="lib/annotations.jar"/>
    <pathelement location="WebRoot/WEB-INF/classes"/>
                <fileset dir="WebRoot/WEB-INF/lib" includes="**/*.jar"/>
    <pathelement location="${eclipse.home}/plugins/org.junit_3.8.1/junit.jar"/>
  </path>

 <import file="${tomcat.home}/bin/catalina-tasks.xml" optional="true" />

  <!-- ====================================================================== -->
  <!-- Init -->
  <!-- ====================================================================== -->

  <!-- init rule creates build directory -->
  <target name="init">
    <tstamp/>
    <mkdir dir="${dist}" />
    <mkdir dir="WebRoot/WEB-INF/classes"/>
  </target>

  <target name="modelClasses" >
    <!--
    Effectively builds the modelClasses jarfile in the ${dist} directory for this project.
    Calls over to the antfile for the model classes (separate eclipse project)
    but passes an output.dir to the ${dist} directory in THIS project.
    -->
    <echo message="user.dir = ${user.dir}"/>
    <ant
      antfile="${modelClasses}/build.xml"
      inheritall="false"
      >
      <property name="output.dir" value="${user.dir}/WebRoot/WEB-INF/lib"/>
    </ant>
  </target>

  <target name="junit-compile" depends="compile">
    <javac
      srcdir="${junit}"
      includes="**/*.java"
      destdir="${bin}"
      deprecation="yes"
      source="1.8"
      target="1.8"
      debug="on"
      includeantruntime="false"
      >
      <classpath refid="junit.classpath" />
    </javac>
  </target>

  <target name="errorprone" depends="init, modelClasses,libs,copyProperties">
    <javac
      encoding="utf-8"
      includes="**/*.java"
      destdir="${bin}"
      deprecation="no"
      debug="on"
      source="1.8"
      target="1.8"
      includeantruntime="false"
	compiler="com.google.errorprone.ErrorProneAntCompilerAdapter"
      >
            <src path="${src}" />
            <src path="gwt-src" />
      <classpath refid="base.classpath" />
    </javac>
  </target>

  <!-- compile rule: Compile the servlets -->
  <target name="compile" depends="init, modelClasses,libs,copyProperties">
    <javac
      encoding="utf-8"
      includes="**/*.java"
      destdir="${bin}"
      deprecation="no"
      debug="on"
      source="1.8"
      target="1.8"
      includeantruntime="false"
      >
            <src path="${src}" />
            <src path="gwt-src" />
      <classpath refid="base.classpath" />
    </javac>
    <copy todir="WebRoot/WEB-INF/classes">
      <fileset dir="src" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="copyProperties">
     <concat destfile="${src}/web.properties">
     <fileset file="web.properties" />
     <fileset file="local.web.properties" />
     </concat>
  	<concat destfile="${src}/branding.properties">
  		<fileset file="branding.properties" />
  		<fileset file="local.branding.properties" />
  	</concat>
    <copy todir="${bin}" overwrite="true">
      <fileset dir="${src}">
        <include name="log4j.properties"/>
      </fileset>
      <filterset>
        <filter token="LOGS_LOCATION" value="${logs.location}"/>
      </filterset>
    </copy>
  </target>

  <target name="buildserver.zip">
    <!-- <ant dir="../BuildServer" target="dist"/> -->
  </target>

  <!-- Create a war file-->
  <target name="war" depends="compile,copyProperties,gwtc,buildserver.zip">
    <property name="warfile" value="submitServer.war"/>
    <copy todir="${bin}" overwrite="true">
      <fileset dir="${src}">
        <include name="log4j.properties"/>
      </fileset>
      <filterset>
        <filter token="LOGS_LOCATION" value="${logs.location}"/>
      </filterset>
    </copy>
    <war
      destfile="${dist}/${warfile}"
      webxml="WebRoot/WEB-INF/web.xml"
      >
      <fileset dir="WebRoot"/>
    </war>
  </target>

  <target name="distribution">
    <jar destfile="marmoset.jar" >
      <fileset dir="../.." includes="workspace/SubmitServer2/src/**,workspace/SubmitServer2/WebRoot/**,workspace/SubmitServer2/lib/**,workspace/SubmitServer2/build*,workspace/SubmitServer2/doc/**"/>
      <fileset dir="../.." includes="workspace/SubmitServerModelClasses/src/**,workspace/SubmitServerModelClasses/build.xml,workspace/SubmitServerModelClasses/dbScripts/**,workspace/SubmitServerModelClasses/lib/**"
        excludes="workspace/SubmitServerModelClasses/dbScripts/mysql.tgz"/>
      <fileset dir="../.." includes="workspace/BuildServer/src/**,workspace/BuildServer/scripts/**,workspace/BuildServer/build*,workspace/BuildServer/lib/**,workspace/BuildServer/install,workspace/BuildServer/killall"/>
<!--			<fileset dir=".." includes="*schema*"/> -->
    </jar>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     marmoset.distribution: Create a directory with all the components
                of the marmoset distribution
     STEPS to create distribution:
     1. Check out SubmitServer2, BuildServer, SubmitServerModelClasses, CommandLineSubmission
     2. Update build.properties to point 'docbook.xsl.dir' variable to the local docbook installation
     3. (optional) run target 'all' in CommandLineSubmission to ensure that submit.jar is the latest
     4. Run the target 'fulldoc' to create the documentation
     5. Run the target 'marmoset.distribution' to create the distribution
      - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="marmoset.distribution">

    <property name="distro.dir" value="../MarmosetDistribution"/>

    <mkdir dir="${distro.dir}"/>

    <jar destfile="${distro.dir}/SubmitServer.jar" >
      <fileset dir="../" includes="SubmitServer2/src/**,SubmitServer2/WebRoot/**," excludes="**CVS**"/>
      <fileset dir="../" includes="SubmitServer2/lib/**,SubmitServer2/lnf/**" excludes="**CVS**"/>
      <fileset dir="../" includes="SubmitServer2/scripts/**,SubmitServer2/junit/**,SubmitServer2/build*" excludes="**CVS**"/>
      <fileset dir="../" includes="SubmitServer2/.project,SubmitServer2/.classpath"/>
    </jar>

    <jar destfile="${distro.dir}/BuildServer.jar" >
      <fileset dir="../" includes="BuildServer/**" excludes="**CVS**"/>
    </jar>

    <jar destfile="${distro.dir}/SubmitServerModelClasses.jar" >
      <fileset dir="../" includes="SubmitServerModelClasses/**" excludes="**CVS**"/>
    </jar>

    <jar destfile="${distro.dir}/CommandLineSubmission.jar" >
      <fileset dir="../" includes="CommandLineSubmission/**" excludes="**CVS**"/>
    </jar>


    <copy todir="${distro.dir}/examples" overwrite="true">
      <fileset dir="examples/" includes="**" excludes="**CVS**,**/.metadata/**"/>
    </copy>


    <jar destfile="../MarmosetDistribution.jar" >
      <fileset dir="../" includes="MarmosetDistribution/**" />
    </jar>

  </target>

  <!-- Dist rule -->
  <target name="dist" depends="clean,modelClasses, compile, war"/>

  <!-- Production -->

  <target name="production.install">
    <property name="generic.install.location" value="${production.install.location}"/>
    <antcall target="generic.install"/>
  </target>

        <!--
        Example archive target for saving old databases.
        Replace "spring2009" with the name of your database to be archived.
        -->
  <target name="spring2009" depends="clean">
    <property name="database.name.value" value="spring2009"/>
    <property name="warfile" value="spring2009.war"/>
    <antcall target="archive.install"/>
  </target>

  <target name="archive.install">
    <property name="database.name.key" value="database.name__override"/>
    <property name="generic.install.location" value="${archive.install.location}"/>
    <antcall target="generic.install"/>
  </target>

  <target name="generic.install" depends="clean,copyProperties">
    <!--
    Use default name for warfile if the warfile hasn't yet been named.
    -->
    <property name="warfile" value="submitServer.war"/>
    <echo message="generic install location = ${generic.install.location}"/>

    <antcall target="dist"/>

    <echo message="Copying war file..."/>
    <exec executable="scp">
      <arg line="${dist}/${warfile} ${generic.install.location}/${webapps}"/>
    </exec>
    <echo message="Copying log4j.jar..."/>
    <exec executable="scp">
      <arg line="lib/log4j.jar ${generic.install.location}/${shared.lib}"/>
    </exec>
  </target>

  <!-- Local -->
  <target name="local.install" depends="clean">
    <property name="generic.install.location" value="${local.install.location}"/>
    <antcall target="generic.install"/>
  </target>

  <target name="demo.install" depends="clean">
    <property name="generic.install.location" value="${demo.install.location}"/>
    <antcall target="generic.install"/>
  </target>

  <target name="shadow.install" depends="dist">
    <exec executable="scp" os="${os}">
      <arg line="${dist}/${warfile} ${production.install.location}/${webapps}/newSubmitServer.war"/>
    </exec>
  </target>

  <!-- ====================================================================== -->
  <!-- Clean -->
  <!-- ====================================================================== -->

  <target name="clean">
    <!-- Delete the ${dist} directory tree -->
    <delete dir=".gwt"/>
    <delete dir="compiledJspClasses"/>
    <delete dir="compiledJspSrc"/>
    <delete dir="${dist}"/>
    <delete dir="gwt-unitCache"/>
    <delete dir="WebRoot/WEB-INF/classes"/>
    <mkdir dir="WebRoot/WEB-INF/classes"/>
    <delete dir="WebRoot/WEB-INF/deploy"/>
    <mkdir dir="WebRoot/WEB-INF/deploy"/>
    <delete dir="WebRoot/codereview"/>
    <mkdir dir="WebRoot/codereview"/>
    <delete file="bugs.xml"/>
    <delete file="WebRoot/resources/buildserver.zip"/>
    <delete file="WebRoot/WEB-INF/lib/gwt-servlet.jar"/>
    <delete file="WebRoot/WEB-INF/lib/modelClasses.jar"/>
    <echo message="Clean"/>
  </target>

  <target name="clean.production.dir">
    <echo message="Deleting old submitServer webapp..."/>
    <delete dir="${production.install.location}/${webapps}/submitServer"/>
  </target>

  <!-- Copy the submit.jar file from CommandLineSubmission project -->
  <target name="copysubmitjar">
    <copy todir="fulldoc/MarmosetHelp/samples" failonerror="false">
      <fileset dir="../CommandLineSubmission" includes="submit.jar"/>
    </copy>
  </target>




  <target name="libs" description="Copy libs to WEB-INF/lib">
    <mkdir dir="WebRoot/WEB-INF/lib" />
    <copy todir="WebRoot/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet.jar" />
    <!-- Add any additional server libs that need to be copied -->
  </target>

  <target name="gwtc" depends="compile" description="GWT compile to JavaScript">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <pathelement location="gwt-src"/>
        <pathelement location="resources"/>
        <path refid="base.classpath"/>
      </classpath>
      <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
      <jvmarg value="-Xmx256M"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg value="-war"/> <arg value="WebRoot"/> <arg value="-strict" />
      <arg value="-localWorkers"/> <arg value="${gwt.threads}"/> 
      <arg value="-logLevel"/> <arg value="${gwt.loglevel}" />
      <arg value="edu.umd.review.CodeReview"/>
    </java>
  </target>

  <target name="devmode" depends="compile" description="Run development mode">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
      <classpath>
        <pathelement location="gwt-src"/>
        <pathelement location="resources"/>
        <path refid="base.classpath"/>
      </classpath>
      <jvmarg value="-Xmx256M"/>
      <arg value="-startupUrl"/>
      <arg value="index.jsp"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg value="-war"/> <arg value="WebRoot"/>
      <arg value="edu.umd.review.CodeReview"/>
    </java>
  </target>

  <target name="findbugs" depends="compile">
    <property name="anttask.jar" value="${findbugs.home}/lib/findbugs-ant.jar"/>
        <taskdef resource="edu/umd/cs/findbugs/anttask/tasks.properties" classpath="${anttask.jar}"/>
    <findbugs home="${findbugs.home}"
               cloud="edu.umd.cs.findbugs.cloud.appengine.findbugs-cloud"
              excludeFilter="findbugsExclude.xml"
	      maxRank="18"
              jvmargs="-ea -Xmx1200m"
              projectName="Marmoset"
              outputFile="bugs.xml"
            >
  <class location="compiledJspClasses"/>
  <class location="WebRoot/WEB-INF/classes"/>
  <class location="../BuildServer/buildserver.jar"/>
  <class location="WebRoot/WEB-INF/lib/modelClasses.jar"/>
<sourcePath path="src/:gwt-src/:../SubmitServerModelClasses/src:compiledJspSrc:../BuildServer/src"/>
        <auxClasspath refid="base.classpath"/>

    </findbugs>
</target>

<target name="compileJsp">

     <mkdir dir="compiledJspSrc" />
   <jasper
             validateXml="false"
             uriroot="WebRoot"
             webXmlFragment="compiledJspSrc/generated_web_xml.txt"
             outputDir="compiledJspSrc" />

     <mkdir dir="compiledJspClasses" />


    <javac destdir="compiledJspClasses"
           optimize="off"
	   includeantruntime="false"
           debug="on" failonerror="false"
           srcdir="compiledJspSrc"
           excludes="**/*.smap">
      <classpath>
        <pathelement location="WebRoot/WEB-INF/classes"/>
        <fileset dir="WebRoot/WEB-INF/lib">
          <include name="*.jar"/>
        </fileset>
        <pathelement location="${tomcat.home}/lib"/>
        <fileset dir="${tomcat.home}/lib">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${tomcat.home}/bin">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <include name="**" />
      <exclude name="tags/**" />
    </javac>

  </target>

</project>
